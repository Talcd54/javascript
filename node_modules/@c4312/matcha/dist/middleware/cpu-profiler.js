"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const grep_1 = require("./grep");
const inspector_1 = require("inspector");
let session;
let enabledProfiler = false;
const getSession = () => {
    if (!session) {
        session = new inspector_1.Session();
        session.connect();
    }
    return session;
};
const postAsync = (method, params) => new Promise((resolve, reject) => getSession().post(method, params, (err, result) => {
    if (err) {
        reject(err);
    }
    else {
        resolve(result);
    }
}));
/**
 * A middleware that runs a CPU profile benchmarks.
 */
exports.cpuProfiler = (onResult, include) => (bench, next) => __awaiter(void 0, void 0, void 0, function* () {
    if (include && !grep_1.grepMatches(include, bench.name)) {
        return next(bench);
    }
    if (!enabledProfiler) {
        enabledProfiler = true;
        yield postAsync('Profiler.enable');
    }
    yield postAsync('Profiler.start');
    yield next(bench);
    const { profile } = yield postAsync('Profiler.stop');
    yield onResult(bench, profile);
});
//# sourceMappingURL=cpu-profiler.js.map